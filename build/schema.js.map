{"version":3,"sources":["../src/schema.js"],"names":[],"mappings":"AAAA;;;;;;AAEA;;AAYA;;AAIA;;;;;;;;;;;;;uBAQiC,mCAC/B,YAAc;sBACK,aAAa,QAAb,EADL;;MACP,0BADO;MACD,sBADC;;AAEZ,MAAI,SAAS,MAAT,EAAiB;AACnB,WAAO,QAAQ,EAAR,CAAP,CADmB;GAArB,MAEO,IAAI,SAAS,QAAT,EAAmB;AAC5B,WAAO,UAAU,EAAV,CAAP,CAD4B;GAAvB,MAEA;AACL,WAAO,IAAP,CADK;GAFA;CAJT,EAUA,OAAS;AACP,MAAI,eAAe,IAAf,EAAqB;AACvB,WAAO,QAAP,CADuB;GAAzB,MAEO,IAAI,eAAe,MAAf,EAAwB;AACjC,WAAO,UAAP,CADiC;GAA5B,MAEA;AACL,WAAO,IAAP,CADK;GAFA;CAHT;;IAXG;IAAe;;;AAuBpB,MAAM,eAAe,+BAAsB;AACzC,QAAM,UAAN;AACA,eAAa,YAAb;AACA,UAAQ,OAAO;AACb,UAAM;AACJ,kCADI;AAEJ,mBAAa,kBAAb;KAFF;AAIA,aAAS;AACP,kCADO;AAEP,mBAAa,qBAAb;KAFF;IALM;CAHW,CAAf;;;;;;AAmBN,IAAI,kBAAkB,+BAAsB;AAC1C,QAAM,aAAN;AACA,eAAa,gBAAb;AACA,UAAQ,OAAO;AACb,UAAM;AACJ,kCADI;AAEJ,mBAAa,uBAAb;KAFF;AAIA,cAAU;AACR,YAAM,YAAN;AACA,mBAAa,sBAAb;KAFF;IALM;CAHY,CAAlB;;AAkBJ,IAAI,mBAAmB,+BAAsB;AAC3C,QAAM,aAAN;AACA,eAAa,gBAAb;AACA,UAAQ,OAAO;AACb,QAAI;AACF,kCADE;AAEF,mBAAa,4BAAb;KAFF;AAIA,UAAM;AACJ,kCADI;AAEJ,mBAAa,uBAAb;KAFF;IALM;CAHa,CAAnB;;AAgBJ,MAAM,SAAS,2BAAkB;AAC/B,SAAO,+BAAsB;AAC3B,UAAM,eAAN;AACA,YAAQ;AACN,YAAM,SAAN;AACA,oBAAc;AACZ,cAAM,yBAAgB,eAAhB,CAAN;AACA,iBAAS,4BAAT;OAFF;KAFF;GAFK,CAAP;CADa,CAAT;;kBAaS","file":"schema.js","sourcesContent":["'use strict';\n\nimport {\n  GraphQLBoolean,\n  GraphQLFloat,\n  GraphQLID,\n  GraphQLInt,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLSchema,\n  GraphQLString,\n} from 'graphql';\n\nimport {\n  nodeDefinitions,\n} from 'graphql-relay';\n\nimport userProfiles from './user-profiles.json';\n\n/**\n * We get the node interface and field from the Relay library.\n *\n * The first method defines the way we resolve an ID to its object.\n * The second defines the way we resolve an object to its GraphQL type.\n */\nvar {nodeInterface, nodeField} = nodeDefinitions(\n  (globalId) => {\n    var {type, id} = fromGlobalId(globalId);\n    if (type === 'User') {\n      return getUser(id);\n    } else if (type === 'Widget') {\n      return getWidget(id);\n    } else {\n      return null;\n    }\n  },\n  (obj) => {\n    if (obj instanceof User) {\n      return userType;\n    } else if (obj instanceof Widget)  {\n      return widgetType;\n    } else {\n      return null;\n    }\n  }\n);\n\n\nconst LocationType = new GraphQLObjectType({\n  name: 'Location',\n  description: 'A location',\n  fields: () => ({\n    city: {\n      type: GraphQLString,\n      description: 'The user\\'s city'\n    },\n    country: {\n      type: GraphQLString,\n      description: 'The user\\'s country'\n    }\n  })\n});\n\n/**\n * This is the type that will be the root of our query,\n * and the entry point into our schema.\n */\nlet UserProfileType = new GraphQLObjectType({\n  name: 'UserProfile',\n  description: 'A user profile',\n  fields: () => ({\n    name: {\n      type: GraphQLString,\n      description: 'The name of this user'\n    },\n    location: {\n      type: LocationType,\n      description: 'The user\\'s location'\n    }\n  }),\n});\n\n\n\n\nlet xUserProfileType = new GraphQLObjectType({\n  name: 'UserProfile',\n  description: 'A user profile',\n  fields: () => ({\n    id: {\n      type: GraphQLString,\n      description: 'The id of this UserProfile'\n    },\n    name: {\n      type: GraphQLString,\n      description: 'The name of this user'\n    }\n  })\n});\n\n\nconst schema = new GraphQLSchema({\n  query: new GraphQLObjectType({\n    name: 'RootQueryType',\n    fields: {\n      node: nodeField,\n      userProfiles: {\n        type: new GraphQLList(UserProfileType),\n        resolve: () => userProfiles\n      }\n    }\n  })\n});\n\nexport default schema;\n"]}